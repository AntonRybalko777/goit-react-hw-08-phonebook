{"version":3,"file":"static/js/869.33b063ae.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Phonebook/Phonebook.styled.js","components/Phonebook/Phonebook.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectItems = state => state.contacts.items;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectFilter = state => state.filtersList.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectItems, selectFilter],\n  (items, filter) => {\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing(4)};\n`;\n\nexport const StyledField = styled(Field)`\n  border: none;\n  border-bottom: 1px solid grey;\n\n  &:focus {\n    outline: none;\n  }\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectItems } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\nimport { TextField } from 'formik-mui';\nimport Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\n\nimport { StyledField, StyledForm } from './ContactForm.styled';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Min length is 2')\n    .max(20, 'Max length is 20')\n    .required('This field is required'),\n  number: Yup.string()\n    .required('This field is required')\n    .matches(/^[0-9.-]*$/, 'Allowed only digits, dash and dots')\n    .min(5, 'Min length is 5')\n    .max(15, 'Max length is 15'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(selectItems);\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={contactSchema}\n        onSubmit={(values, actions) => {\n          if (items.find(contact => contact.name === values.name.trim())) {\n            Notiflix.Notify.failure(`${values.name} already in contacts`);\n          } else {\n            dispatch(\n              addContact({\n                name: values.name.trim(),\n                number: values.number.trim(),\n              })\n            );\n            actions.resetForm();\n          }\n        }}\n      >\n        <StyledForm>\n          <StyledField\n            name=\"name\"\n            component={TextField}\n            label=\"Name\"\n            id=\"standard-basic\"\n            variant=\"standard\"\n          />\n          <StyledField\n            type=\"tel\"\n            name=\"number\"\n            component={TextField}\n            label=\"Number\"\n            id=\"standard-basic\"\n            variant=\"standard\"\n          />\n          <Button type=\"submit\" variant=\"contained\" endIcon={<AddIcon />}>\n            Add contact\n          </Button>\n        </StyledForm>\n      </Formik>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  list-style: none;\n  transition: 400ms ease-in;\n`;\n\nexport const Li = styled.li`\n  font-weight: 500;\n  padding: 5px;\n  position: relative;\n  transition: 200ms ease-in;\n\n  &:nth-child(1n + 2) {\n    border-top: 1px solid #e8e8e8;\n  }\n\n  &:hover,\n  :focus {\n    background-color: #ececec;\n\n    svg {\n      color: #fba2a2;\n    }\n  }\n`;\n\nexport const Button = styled.button`\n  margin-left: 10px;\n  border: 0;\n  max-width: 50px;\n  border-radius: 5px;\n  background: transparent;\n  padding: 0;\n  cursor: pointer;\n  transition: 200ms ease-in;\n  position: absolute;\n  right: 10px;\n\n  &:hover {\n    svg {\n      color: red;\n      transform: scale(1.2);\n    }\n  }\n\n  svg {\n    color: transparent;\n    transition: 200ms ease-in;\n\n    @media (max-width: 768px) {\n      color: #fba2a2;\n    }\n  }\n`;\n","import { Button, Li, Ul } from './ContactList.styled';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <Ul>\n      {filteredContacts.map(contact => (\n        <Li key={contact.id}>\n          {contact.name} : <b>{contact.number}</b>\n          <Button\n            onClick={() => {\n              dispatch(deleteContact(contact));\n            }}\n          >\n            <AiFillDelete size={15} />\n          </Button>\n        </Li>\n      ))}\n    </Ul>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  gap: ${props => props.theme.spacing(2)};\n  font-weight: bold;\n`;\n\nexport const Input = styled.input`\n  margin-left: 10px;\n  border: none;\n  border-bottom: 1px solid grey;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const Container = styled.div`\n  margin: 20px 0;\n`;\n","import { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/FiltersSlice';\nimport { Container } from './Filter.styled';\nimport { TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Container>\n      <TextField\n        fullWidth\n        size=\"small\"\n        id=\"filled-basic\"\n        label=\"Find contacts by name\"\n        variant=\"filled\"\n        onChange={evt => {\n          dispatch(changeFilter(evt.target.value));\n        }}\n      />\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 450px;\n  margin: 30px auto;\n  padding: 20px;\n`;\n\nexport const StyledHeader = styled.h1`\n  text-align: center;\n`;\n\nexport const StyledHeader2 = styled.h2`\n  text-align: center;\n  margin-top: 20px;\n`;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { useSelector } from 'react-redux';\nimport { selectError, selectIsLoading, selectItems } from 'redux/selectors';\nimport { Container, StyledHeader, StyledHeader2 } from './Phonebook.styled';\n\nexport const Phonebook = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const items = useSelector(selectItems);\n  return (\n    <Container>\n      <StyledHeader>Phonebook</StyledHeader>\n      <ContactForm />\n      <StyledHeader2>Contacts</StyledHeader2>\n      {isLoading && (\n        <RotatingLines\n          strokeColor=\"grey\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"56\"\n          visible={true}\n        />\n      )}\n      {error && (\n        <b>Whoops! Something went wrong. Please try to reload the page.</b>\n      )}\n      {items.length > 0 ? <Filter /> : <span>Contact list is empty</span>}\n      <ContactList />\n    </Container>\n  );\n};\n","import { Phonebook } from 'components/Phonebook/Phonebook';\nimport { Helmet } from 'react-helmet';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <title>My Phonebook</title>\n      </Helmet>\n      <Phonebook />\n    </div>\n  );\n}\n"],"names":["selectItems","state","contacts","items","selectError","error","selectIsLoading","isLoading","selectVisibleContacts","createSelector","filtersList","filter","contact","name","toLowerCase","includes","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","props","theme","spacing","StyledField","Field","_templateObject2","contactSchema","Yup","shape","min","max","required","number","matches","ContactForm","dispatch","useDispatch","useSelector","_jsx","children","Formik","initialValues","validationSchema","onSubmit","values","actions","find","trim","Notiflix","concat","addContact","resetForm","_jsxs","component","TextField","label","id","variant","type","Button","endIcon","AddIcon","Ul","Li","_templateObject3","ContactList","filteredContacts","map","onClick","deleteContact","AiFillDelete","size","Container","Filter","fullWidth","onChange","evt","changeFilter","target","value","StyledHeader","StyledHeader2","Phonebook","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","length","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}