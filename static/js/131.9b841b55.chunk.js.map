{"version":3,"file":"static/js/131.9b841b55.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Phonebook/Phonebook.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectItems = state => state.contacts.items;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectFilter = state => state.filtersList.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectItems, selectFilter],\n  (items, filter) => {\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing(4)};\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing(2)};\n  font-weight: bold;\n  padding-bottom: 20px;\n  position: relative;\n`;\n\nexport const StyledField = styled(Field)`\n  border: none;\n  border-bottom: 1px solid grey;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  font-size: ${props => props.theme.spacing(2)};\n  color: ${props => props.theme.colors.error};\n  position: absolute;\n  bottom: 0;\n`;\n\nexport const Button = styled.button`\n  border: 0;\n  max-width: 160px;\n  border-radius: 5px;\n  background: #4676d7;\n  color: #fff;\n  padding: 8px 16px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: 200ms ease-in;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 5px;\n\n  &:hover,\n  :focus {\n    background: #739ef5;\n  }\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { AiOutlinePlusCircle } from 'react-icons/ai';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectItems } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\n\nimport {\n  StyledField,\n  Label,\n  StyledForm,\n  StyledErrorMessage,\n  Button,\n} from './ContactForm.styled';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Min length is 2')\n    .max(20, 'Max length is 20')\n    .required('This field is required'),\n  number: Yup.string()\n    .required('This field is required')\n    .matches(/^[0-9.-]*$/, 'Allowed only digits, dash and dots')\n    .min(7, 'Min length is 7')\n    .max(12, 'Max length is 12'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(selectItems);\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={contactSchema}\n        onSubmit={(values, actions) => {\n          if (items.find(contact => contact.name === values.name.trim())) {\n            Notiflix.Notify.failure(`${values.name} already in contacts`);\n          } else {\n            dispatch(\n              addContact({\n                name: values.name.trim(),\n                number: values.number.trim(),\n              })\n            );\n            actions.resetForm();\n          }\n        }}\n      >\n        <StyledForm>\n          <Label>\n            Name\n            <StyledField name=\"name\" />\n            <StyledErrorMessage name=\"name\" component=\"div\" />\n          </Label>\n\n          <Label>\n            Number\n            <StyledField type=\"tel\" name=\"number\" />\n            <StyledErrorMessage name=\"number\" component=\"div\" />\n          </Label>\n\n          <Button type=\"submit\">\n            <AiOutlinePlusCircle />\n            Add contact\n          </Button>\n        </StyledForm>\n      </Formik>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  list-style: none;\n  transition: 400ms ease-in;\n`;\n\nexport const Li = styled.li`\n  font-weight: 500;\n  padding: 5px;\n  position: relative;\n  border-radius: 5px;\n  transition: 200ms ease-in;\n\n  &:nth-child(1n + 2) {\n    border-top: 1px solid #e8e8e8;\n  }\n\n  &:hover,\n  :focus {\n    background-color: #ececec;\n\n    svg {\n      color: #fba2a2;\n    }\n  }\n`;\n\nexport const Button = styled.button`\n  margin-left: 10px;\n  border: 0;\n  max-width: 50px;\n  border-radius: 5px;\n  background: transparent;\n  padding: 0;\n  cursor: pointer;\n  transition: 200ms ease-in;\n  position: absolute;\n  right: 10px;\n\n  &:hover {\n    svg {\n      color: red;\n      transform: scale(1.2);\n    }\n  }\n\n  svg {\n    color: transparent;\n    transition: 200ms ease-in;\n  }\n`;\n","import { Button, Li, Ul } from './ContactList.styled';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <Ul>\n      {filteredContacts.map(contact => (\n        <Li key={contact.id}>\n          {contact.name} : <b>{contact.number}</b>\n          <Button\n            onClick={() => {\n              dispatch(deleteContact(contact));\n            }}\n          >\n            <AiFillDelete size={15} />\n          </Button>\n        </Li>\n      ))}\n    </Ul>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  gap: ${props => props.theme.spacing(2)};\n  font-weight: bold;\n`;\n\nexport const Input = styled.input`\n  margin-left: 10px;\n  border: none;\n  border-bottom: 1px solid grey;\n\n  &:focus {\n    outline: none;\n  }\n`;\n","import { Input, Label } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/FiltersSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <Label>\n        Find contacts by name\n        <Input\n          type=\"text\"\n          onChange={evt => {\n            dispatch(changeFilter(evt.target.value));\n          }}\n        />\n      </Label>\n    </div>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { useSelector } from 'react-redux';\nimport { selectError, selectIsLoading, selectItems } from 'redux/selectors';\n\nexport const Phonebook = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const items = useSelector(selectItems);\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      {isLoading && (\n        <RotatingLines\n          strokeColor=\"grey\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"96\"\n          visible={true}\n        />\n      )}\n      {error && (\n        <b>Whoops! Something went wrong. Please try to reload the page.</b>\n      )}\n      {items.length > 0 ? <Filter /> : <span>Contact list is empty</span>}\n      <ContactList />\n    </div>\n  );\n};\n","import { Phonebook } from 'components/Phonebook/Phonebook';\nimport { Helmet } from 'react-helmet';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <Phonebook />\n    </div>\n  );\n}\n"],"names":["selectItems","state","contacts","items","selectError","error","selectIsLoading","isLoading","selectVisibleContacts","createSelector","filtersList","filter","contact","name","toLowerCase","includes","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","props","theme","spacing","Label","_templateObject2","StyledField","Field","_templateObject3","StyledErrorMessage","ErrorMessage","_templateObject4","colors","Button","_templateObject5","contactSchema","Yup","shape","min","max","required","number","matches","ContactForm","dispatch","useDispatch","useSelector","_jsx","children","Formik","initialValues","validationSchema","onSubmit","values","actions","find","trim","Notiflix","concat","addContact","resetForm","_jsxs","component","type","AiOutlinePlusCircle","Ul","Li","ContactList","filteredContacts","map","onClick","deleteContact","AiFillDelete","size","id","Input","Filter","onChange","evt","changeFilter","target","value","Phonebook","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","length","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}